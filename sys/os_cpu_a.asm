;/****************************************************************
;时间：	2014.2.22
;作者：	lza1205
;功能：	基于 ARM Cortex-M3 内核的芯片相关汇编代码，本系统基于 
;		stm32f103ze
;
;		主要实现以下函数
;			__cpu_interrupt_disable();			//禁止中断
;			__cpu_sys_interrupt_enable();		//打开中断
;			__cpu_task_shced();					//任务调度
;			__cpu_start_shced					//开始调度，用于内核第一次调度
;			__cpu_int_shced()					//中断退出时调用
;
;		事实上，真正的任务切换不是在 __cpu_task_shced 这个函数中完成，
;	这个函数 不过 触发一次 pendSV 中断而已。
;		
;****************************************************************/


;********************************************************************
;																	*
;				全局变量的声明										*
;																	*
;********************************************************************	
;声明这些变量是在本文件中定义，且可以被其他文件引用
	EXPORT	start_app		;禁止中断

;****************************************************************
;																	*
;			相当于 C 语言的宏定义
;		这些寄存器的具体含义，请参考 Cortex-M3 权威指南.pdf  135 页
;																	*
;****************************************************************
NVIC_INT_CTRL   EQU     0xE000ED04  	;中断控制及其状态寄存器	ICSR 的地址          					
NVIC_SYSPRI14   EQU     0xE000ED22		;PendSV	优先级寄存器地址                        
NVIC_PENDSV_PRI EQU           0xFF		;PendSV	中断的优先级 	                          
NVIC_PENDSVSET  EQU     0x10000000		;位 28 为1                        


;********************************************************************
;																	*
;						段声明										*
;																	*
;********************************************************************
;	许多 ucosII 的移植版本都是如下标号：
;		RSEG CODE:CODE:NOROOT(2)
;	该标号的含义是 RSEG 选择一个已在前面定义过的再定位段作为当前段。
;					SEG 是从新定位段
;					CODE 前面有个段得段名为 CODE
;					code 段得属性为 代码段
;					noroot	如果编译的时候没有引用到下面的标号，则不编译进去
;					(2)	 2^2 字节对齐
;	但对于 MDK 的编译器而言，却不是上面的写法
;	AREA |.text|, CODE, READONLY, ALIGN=2 	;AREA |.text| 选择段 |.text|。
                                      		;CODE表示代码段，READONLY表示只读（缺省）
                                      		;ALIGN=2表示4字节对齐。若ALIGN=n，这2^n对齐
;	THUMB                                 	;Thumb 代码
;	REQUIRE8                              	;指定当前文件要求堆栈八字节对齐
;	PRESERVE8                             	;令指定当前文件保持堆栈八字节对齐
;********************************************************************
	AREA |.text|, CODE, READONLY, ALIGN=2 	;AREA |.text| 选择段 |.text|。
                                      		;CODE表示代码段，READONLY表示只读（缺省）
											; |.text| 是在前面定义了的， 在哪被定义呢？
											; 去看下启动代码。就知道了
											; 在这里顺道说下，flash 的第一个数据段，或者
											; 说是代码段，是 RESET 段，为什么它是第一个呢？
											; 请参考 stm32.sct 配置文件
                                      		;ALIGN=2表示4字节对齐。若ALIGN=n，这2^n对齐
	THUMB                                 	;Thumb 代码
	REQUIRE8                              	;指定当前文件要求堆栈八字节对齐
	PRESERVE8                             	;令指定当前文件保持堆栈八字节对齐

start_app
	LDR			R0,	=0x8003400
	BLX			R0	
	BX			LR

loop
	B			loop
	
	END


